{"ast":null,"code":"import { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: 'smooth'\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: 'smooth'\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect(); //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n      // the view port  refers to the part of the document you're viewing which is currently visible in its window\n\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n      /* when the element is Partially Visible */\n\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      /* Completely Visible */\n\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollHandler","currentScreenBroadCaster"],"sources":["/Users/giddywiddy/website/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from './commonUtils'\nimport { Subject } from 'rxjs'\n\nexport default class ScrollService {\n    static scrollHandler = new ScrollService();\n\n    static currentScreenBroadCaster = new Subject()\n    static currentScreenFadeIn = new Subject()\n\n    constructor(){\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport)\n    }\n    scrollToHireMe = () => {\n        let contactMeScreen = document.getElementById(\"Contact Me\")\n        if(!contactMeScreen) return\n        contactMeScreen.scrollIntoView({behavior: 'smooth'})\n    }\n    scrollToHome = () => {\n        let homeScreen = document.getElementById(\"Home\")\n        if(!homeScreen) return\n        homeScreen.scrollIntoView({behavior: 'smooth'})\n    }\n    isElementInView = (elem, type) => {\n    let rec = elem.getBoundingClientRect();\n    //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n    // the view port  refers to the part of the document you're viewing which is currently visible in its window\n    let elementTop = rec.top;\n    let elemBottom = rec.bottom;\n\n    /* when the element is Partially Visible */\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n\n    /* Completely Visible */\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyVisible;\n\n      case \"complete\":\n        return completelyVisible;\n\n      default:\n        return false;\n    }\n  };\n\n  checkCurrentScreenUnderViewport = (event) => {\n    if (!event || Object.keys(event).length < 1) return;\n\n    for (let screen of TOTAL_SCREENS) {\n      let screenFromDOM = document.getElementById(screen.screen_name);\n      if (!screenFromDOM) continue;\n\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n      if (fullyVisible || partiallyVisible) {\n        if (partiallyVisible && !screen.alreadyRendered) {\n          //BROADCAST FADE IN EFFECT\n          ScrollService.currentScreenFadeIn.next({\n            fadeInScreen: screen.screen_name,\n          });\n          screen[\"alreadyRendered\"] = true;\n          break;\n        }\n\n        if (fullyVisible) {\n          // BROADCAST SCREEN NAME\n          ScrollService.currentScreenBroadcaster.next({\n            screenInView: screen.screen_name,\n          });\n          break;\n        }\n      }\n    }\n  };\n}"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,MAAMC,aAAN,CAAoB;EAM/BC,WAAW,GAAE;IAAA,KAGbC,cAHa,GAGI,MAAM;MACnB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;MACA,IAAG,CAACF,eAAJ,EAAqB;MACrBA,eAAe,CAACG,cAAhB,CAA+B;QAACC,QAAQ,EAAE;MAAX,CAA/B;IACH,CAPY;;IAAA,KAQbC,YARa,GAQE,MAAM;MACjB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;MACA,IAAG,CAACI,UAAJ,EAAgB;MAChBA,UAAU,CAACH,cAAX,CAA0B;QAACC,QAAQ,EAAE;MAAX,CAA1B;IACH,CAZY;;IAAA,KAabG,eAba,GAaK,CAACC,IAAD,EAAOC,IAAP,KAAgB;MAClC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV,CADkC,CAElC;MACA;;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;MACA,IAAIC,UAAU,GAAGJ,GAAG,CAACK,MAArB;MAEA;;MACA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,UAAU,IAAI,CAAxE;MAEA;;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,UAAU,IAAIG,MAAM,CAACC,WAAhE;;MAEA,QAAQT,IAAR;QACE,KAAK,SAAL;UACE,OAAOO,gBAAP;;QAEF,KAAK,UAAL;UACE,OAAOG,iBAAP;;QAEF;UACE,OAAO,KAAP;MARJ;IAUD,CApCc;;IAAA,KAsCfC,+BAtCe,GAsCoBC,KAAD,IAAW;MAC3C,IAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EAA6C;;MAE7C,KAAK,IAAIC,MAAT,IAAmB9B,aAAnB,EAAkC;QAChC,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;QACA,IAAI,CAACD,aAAL,EAAoB;QAEpB,IAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;QACA,IAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;QAEA,IAAIE,YAAY,IAAIZ,gBAApB,EAAsC;UACpC,IAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAhC,EAAiD;YAC/C;YACAhC,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;cACrCC,YAAY,EAAEP,MAAM,CAACE;YADgB,CAAvC;YAGAF,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;YACA;UACD;;UAED,IAAIG,YAAJ,EAAkB;YAChB;YACA/B,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;cAC1CG,YAAY,EAAET,MAAM,CAACE;YADqB,CAA5C;YAGA;UACD;QACF;MACF;IACF,CAnEc;;IACTV,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;EACH;;AAR8B;AAAdvB,a,CACVuC,a,GAAgB,IAAIvC,aAAJ,E;AADNA,a,CAGVwC,wB,GAA2B,IAAIzC,OAAJ,E;AAHjBC,a,CAIViC,mB,GAAsB,IAAIlC,OAAJ,E"},"metadata":{},"sourceType":"module"}