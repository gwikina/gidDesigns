{"ast":null,"code":"import React from 'react';\nimport { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nimport { object } from 'prop-types';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: smooth\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: smooth\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom > 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case 'partial':\n          return partiallyVisible;\n\n        case 'complete':\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screen) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["React","TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","smooth","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"sources":["/Users/giddywiddy/website/src/utilities/ScrollService.js"],"sourcesContent":["import React from 'react'\nimport { TOTAL_SCREENS } from './commonUtils'\nimport { Subject } from 'rxjs'\nimport { object } from 'prop-types'\n\nexport default class ScrollService {\n    static scrollHandler = new ScrollService();\n\n    static currentScreenBroadCaster = new Subject()\n    static currentScreenFadeIn = new Subject()\n\n    constructor(){\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport)\n    }\n    scrollToHireMe = () => {\n        let contactMeScreen = document.getElementById(\"Contact Me\")\n        if(!contactMeScreen) return\n        contactMeScreen.scrollIntoView({behavior: smooth})\n    }\n    scrollToHome = () => {\n        let homeScreen = document.getElementById(\"Home\")\n        if(!homeScreen) return\n        homeScreen.scrollIntoView({behavior: smooth})\n    }\n    isElementInView = (elem, type) => {\n        let rec = elem.getBoundingClientRect()\n        let elementTop = rec.top\n        let elementBottom = rec.bottom\n\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom > 0\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight\n\n        switch(type){\n            case 'partial':\n                return partiallyVisible;\n            case 'complete':\n                return completelyVisible\n                default:\n                    return false\n        }\n    } \n\n    checkCurrentScreenUnderViewport = (event) =>{\n        if(!event || object.keys(event).length < 1)\n            return\n        for(let screen of TOTAL_SCREENS){\n            let screenFromDOM = document.getElementById(screen.screen_name)\n            if(!screen)\n                continue\n            \n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\")\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\")\n\n            if (fullyVisible || partiallyVisible){\n                if(partiallyVisible && !screen.alreadyRendered){\n                    ScrollService.currentScreenFadeIn.next({\n                        fadeInScreen: screen.screen_name\n                    })\n                    screen['alreadyRendered'] = true\n                    break\n                }\n                if(fullyVisible){\n                    ScrollService.currentScreenBroadCaster.next({\n                        screenInView: screen.screen_name\n                    })\n                    break\n                }\n            }\n        }\n    }\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,eAAe,MAAMC,aAAN,CAAoB;EAM/BC,WAAW,GAAE;IAAA,KAGbC,cAHa,GAGI,MAAM;MACnB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;MACA,IAAG,CAACF,eAAJ,EAAqB;MACrBA,eAAe,CAACG,cAAhB,CAA+B;QAACC,QAAQ,EAAEC;MAAX,CAA/B;IACH,CAPY;;IAAA,KAQbC,YARa,GAQE,MAAM;MACjB,IAAIC,UAAU,GAAGN,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;MACA,IAAG,CAACK,UAAJ,EAAgB;MAChBA,UAAU,CAACJ,cAAX,CAA0B;QAACC,QAAQ,EAAEC;MAAX,CAA1B;IACH,CAZY;;IAAA,KAabG,eAba,GAaK,CAACC,IAAD,EAAOC,IAAP,KAAgB;MAC9B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;MACA,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;MAEA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,GAAG,CAA1E;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,aAAa,IAAIG,MAAM,CAACC,WAAnE;;MAEA,QAAOT,IAAP;QACI,KAAK,SAAL;UACI,OAAOO,gBAAP;;QACJ,KAAK,UAAL;UACI,OAAOG,iBAAP;;QACA;UACI,OAAO,KAAP;MANZ;IAQH,CA7BY;;IAAA,KA+BbC,+BA/Ba,GA+BsBC,KAAD,IAAU;MACxC,IAAG,CAACA,KAAD,IAAU1B,MAAM,CAAC2B,IAAP,CAAYD,KAAZ,EAAmBE,MAAnB,GAA4B,CAAzC,EACI;;MACJ,KAAI,IAAIC,MAAR,IAAkB/B,aAAlB,EAAgC;QAC5B,IAAIgC,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;QACA,IAAG,CAACF,MAAJ,EACI;QAEJ,IAAIG,YAAY,GAAG,KAAKpB,eAAL,CAAqBkB,aAArB,EAAoC,UAApC,CAAnB;QACA,IAAIT,gBAAgB,GAAG,KAAKT,eAAL,CAAqBkB,aAArB,EAAoC,SAApC,CAAvB;;QAEA,IAAIE,YAAY,IAAIX,gBAApB,EAAqC;UACjC,IAAGA,gBAAgB,IAAI,CAACQ,MAAM,CAACI,eAA/B,EAA+C;YAC3ChC,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YADc,CAAvC;YAGAF,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;YACA;UACH;;UACD,IAAGG,YAAH,EAAgB;YACZ/B,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;cACxCG,YAAY,EAAET,MAAM,CAACE;YADmB,CAA5C;YAGA;UACH;QACJ;MACJ;IACJ,CA1DY;;IACTT,MAAM,CAACiB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKd,+BAAvC;EACH;;AAR8B;AAAdxB,a,CACVuC,a,GAAgB,IAAIvC,aAAJ,E;AADNA,a,CAGVoC,wB,GAA2B,IAAItC,OAAJ,E;AAHjBE,a,CAIViC,mB,GAAsB,IAAInC,OAAJ,E"},"metadata":{},"sourceType":"module"}